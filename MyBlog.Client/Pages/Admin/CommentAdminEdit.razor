@page "/admin/comment-edit"
@page "/admin/comment-edit/{id:guid}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject ICommentAdminService CommentAdminService
@inject IBlogPostAdminService BlogPostAdminService
@inject IApplicationUserAdminService ApplicationUserAdminService
@* InjectionCodePlaceholder *@
@rendermode InteractiveAuto

<section>
    @if (Id.Equals(Guid.Empty))
    {
        <h1>Comment Role</h1>
    }
    else
    {
        <h1>Edit Comment</h1>
    }
    <article>
        <EditForm class="container" Model="comment" OnSubmit="HandleSubmit">
            <div class="row">
                <div class="col">
                    <label>
                        Blog Post:
                        <select @onchange="BlogPostOnChange">
                            <option>Select blog Post...</option>
                            @foreach (var blogPost in blogPostList)
                            {
                                if (comment.BlogPost == null ? false : comment.BlogPost.Id.Equals(blogPost.Id))
                                {
                                    <option value="@blogPost.Id" selected>@blogPost.Title</option>
                                }
                                else
                                {
                                    <option value="@blogPost.Id">@blogPost.Title</option>
                                }
                            }
                        </select>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Commenter:
                        <select @onchange="CommenterOnChange">
                            <option>Select commenter...</option>
                            @foreach (var commenter in commenterList)
                            {
                                if (comment.Commenter == null ? false : comment.Commenter.Id.Equals(commenter.Id))
                                {
                                    <option value="@commenter.Id" selected>@commenter.UserName</option>
                                }
                                else
                                {
                                    <option value="@commenter.Id">@commenter.UserName</option>
                                }
                            }
                        </select>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Date:
                        <InputDate @bind-Value="comment.Date" />
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        true:
                        <InputText @bind-Value="comment.Text" />
                    </label>
                </div>
            </div>
            @* EditRowCodePlaceholder *@
            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/comment-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    Comment comment { get; set; } = new Comment();
    List<BlogPost> blogPostList { get; set; } = [];
    List<ApplicationUser> commenterList { get; set; } = [];
    @* ListDeclarationCodePlaceholder *@

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var blogPostListResult = await BlogPostAdminService.GetAllAsync();
        if (blogPostListResult != null)
        {
            blogPostList = blogPostListResult;
        }
        var commenterListResult = await ApplicationUserAdminService.GetAllAsync();
        if (commenterListResult != null)
        {
            commenterList = commenterListResult;
        }
        @* OnInitializedCodePlaceholder *@
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var result = await CommentAdminService.GetByIdAsync(Id);

        if (result == null)
        {
            comment = new Comment();
        }
        else
        {
            comment = result;
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        if (userName == null)
        {
            return;
        }

        if (comment == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            var dbComment = await CommentAdminService.AddAsync(userName, comment);

            if (dbComment == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/comment-edit/{dbComment.Id}");
        }
        else
        {
            await CommentAdminService.EditAsync(userName, Id, comment);
        }
    }

    async Task Delete()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        await CommentAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/comment-list");
    }

    void BlogPostOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        comment.BlogPost = blogPostList.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    }

    void CommenterOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        comment.Commenter = commenterList.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    }

    @* OnChangeCodePlaceholder *@
}
