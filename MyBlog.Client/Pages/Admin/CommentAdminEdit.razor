@page "/admin/comment-edit"
@page "/admin/comment-edit/{id:guid}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject ICommentAdminService CommentAdminService

@* InjectionCodePlaceholder *@
@* @inject IToDoListAdminService ToDoListAdminService *@

<section>
  @if (Id.Equals(Guid.Empty))
  {
    <h1>Create Comment</h1>
  }
  else
  {
    <h1>Edit Comment</h1>
  }
  <article>
    <EditForm class="container" Model="commentAdminEditModel" OnSubmit="HandleSubmit">

      @* EditRowCodePlaceholder *@
      @* <div class="row">
                <div class="col">
                    <label>
                        To Do List:
                        <select @onchange="ToDoListOnChange">
                            <option>Select to Do List...</option>
                            @if (toDoListList != null)
                            {
                                @foreach (var toDoList in toDoListList)
                                {
                                    if (commentAdminEditModel.ToDoList != null && commentAdminEditModel.ToDoList.Id.Equals(toDoList.Id))
                                    {
                                        <option value="@toDoList.Id" selected>@toDoList.Title</option>
                                    }
                                    else
                                    {
                                        <option value="@toDoList.Id">@toDoList.Title</option>
                                    }
                                }
                            }
                        </select>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Title:
                        <InputText @bind-Value="commentAdminEditModel.Title" />
                    </label>
                </div>
            </div> *@

            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/comment-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    CommentAdminEditModel commentAdminEditModel { get; set; } = new CommentAdminEditModel();

    @* ListDeclarationCodePlaceholder *@
    @* List<ToDoList>? toDoListList { get; set; } *@

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        await base.OnInitializedAsync();

        @* OnInitializedCodePlaceholder *@
        @* var toDoListListResult = await ToDoListAdminService.GetAllAsync(userName);
        if (toDoListListResult != null)
        {
            toDoListList = toDoListListResult;
        } *@
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var databaseCommentAdminDto = await CommentAdminService.GetByIdAsync(userName, Id);

        if (databaseCommentAdminDto == null)
        {
            commentAdminEditModel = new CommentAdminEditModel();
        }
        else
        {
            commentAdminEditModel = CommentAdminEditModel.FromCommentAdminDto(databaseCommentAdminDto);
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        @* if (string.IsNullOrWhiteSpace(commentAdminEditModel.Name))
        {
            return;
        } *@

        var commentAdminDto = CommentAdminEditModel.ToCommentAdminDto(commentAdminEditModel);
        commentAdminDto.ApplicationUserName = userName;

        if (Id.Equals(Guid.Empty))
        {
            var newCommentAdminDto = await CommentAdminService.AddAsync(commentAdminDto);

            if (newCommentAdminDto == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/comment-edit/{newCommentAdminDto.Id}");
        }
        else
        {
            await CommentAdminService.EditAsync(commentAdminDto);
        }
    }

    async Task Delete()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        await CommentAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/comment-list");
    }


    @* OnChangeCodePlaceholder *@
    @* void ToDoListOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        commentAdminEditModel.ToDoList = toDoListList?.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    } *@
}
