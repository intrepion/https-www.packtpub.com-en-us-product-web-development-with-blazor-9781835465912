@page "/admin/blog-post-edit"
@page "/admin/blog-post-edit/{id:guid}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IBlogPostAdminService BlogPostAdminService
@inject IApplicationUserAdminService ApplicationUserAdminService
@inject ICategoryAdminService CategoryAdminService
@* InjectionCodePlaceholder *@
@rendermode InteractiveAuto

<section>
    @if (Id.Equals(Guid.Empty))
    {
        <h1>Blog Post Role</h1>
    }
    else
    {
        <h1>Edit Blog Post</h1>
    }
    <article>
        <EditForm class="container" Model="blogPost" OnSubmit="HandleSubmit">
            <div class="row">
                <div class="col">
                    <label>
                        Author:
                        <select @onchange="AuthorOnChange">
                            <option>Select author...</option>
                            @foreach (var author in authorList)
                            {
                                if (blogPost.Author == null ? false : blogPost.Author.Id.Equals(author.Id))
                                {
                                    <option value="@author.Id" selected>@author.UserName</option>
                                }
                                else
                                {
                                    <option value="@author.Id">@author.UserName</option>
                                }
                            }
                        </select>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Category:
                        <select @onchange="CategoryOnChange">
                            <option>Select category...</option>
                            @foreach (var category in categoryList)
                            {
                                if (blogPost.Category == null ? false : blogPost.Category.Id.Equals(category.Id))
                                {
                                    <option value="@category.Id" selected>@category.Name</option>
                                }
                                else
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            }
                        </select>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Publish Date:
                        <InputDate @bind-Value="blogPost.PublishDate" />
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Text:
                        <InputText @bind-Value="blogPost.Text" />
                    </label>
                </div>
            </div>
            @* EditRowCodePlaceholder *@
            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/blog-post-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    BlogPost blogPost { get; set; } = new BlogPost();
    List<ApplicationUser> authorList { get; set; } = [];
    List<Category> categoryList { get; set; } = [];
    @* ListDeclarationCodePlaceholder *@

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authorListResult = await ApplicationUserAdminService.GetAllAsync();
        if (authorListResult != null)
        {
            authorList = authorListResult;
        }
        var categoryListResult = await CategoryAdminService.GetAllAsync();
        if (categoryListResult != null)
        {
            categoryList = categoryListResult;
        }
        @* OnInitializedCodePlaceholder *@
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var result = await BlogPostAdminService.GetByIdAsync(Id);

        if (result == null)
        {
            blogPost = new BlogPost();
        }
        else
        {
            blogPost = result;
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        if (userName == null)
        {
            return;
        }

        if (blogPost == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            var dbBlogPost = await BlogPostAdminService.AddAsync(userName, blogPost);

            if (dbBlogPost == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/blog-post-edit/{dbBlogPost.Id}");
        }
        else
        {
            await BlogPostAdminService.EditAsync(userName, Id, blogPost);
        }
    }

    async Task Delete()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        await BlogPostAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/blog-post-list");
    }

    void AuthorOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        blogPost.Author = authorList.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    }

    void CategoryOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        blogPost.Category = categoryList.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    }

    @* OnChangeCodePlaceholder *@
}
