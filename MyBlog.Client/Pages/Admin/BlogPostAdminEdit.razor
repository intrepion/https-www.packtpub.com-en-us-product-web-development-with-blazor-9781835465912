@page "/admin/blog-post-edit"
@page "/admin/blog-post-edit/{id:guid}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IBlogPostAdminService BlogPostAdminService

@inject IApplicationUserAdminService ApplicationUserAdminService
@inject ICategoryAdminService CategoryAdminService
@* InjectionCodePlaceholder *@
@* @inject IToDoListAdminService ToDoListAdminService *@

<section>
  @if (Id.Equals(Guid.Empty))
  {
    <h1>Create Blog Post</h1>
  }
  else
  {
    <h1>Edit Blog Post</h1>
  }
  <article>
    <EditForm class="container" Model="blogPostAdminEditModel" OnSubmit="HandleSubmit">

      <div class="row">
        <div class="col">
          <label>
            Author:
            <select @onchange="AuthorOnChange">
              <option>Select author...</option>
                @if (authorList != null)
                {
                  @foreach (var author in authorList)
                  {
                    if (blogPostAdminEditModel.Author != null && blogPostAdminEditModel.Author.Id.Equals(author.Id))
                    {
                      <option value="@author.Id" selected>@author.UserName</option>
                    }
                    else
                    {
                      <option value="@author.Id">@author.UserName</option>
                    }
                  }
                }
              </select>
          </label>
        </div>
      </div>
      <div class="row">
        <div class="col">
          <label>
            Category:
            <select @onchange="CategoryOnChange">
              <option>Select category...</option>
                @if (categoryList != null)
                {
                  @foreach (var category in categoryList)
                  {
                    if (blogPostAdminEditModel.Category != null && blogPostAdminEditModel.Category.Id.Equals(category.Id))
                    {
                      <option value="@category.Id" selected>@category.Name</option>
                    }
                    else
                    {
                      <option value="@category.Id">@category.Name</option>
                    }
                  }
                }
              </select>
          </label>
        </div>
      </div>
      @* EditRowCodePlaceholder *@
      @* <div class="row">
                <div class="col">
                    <label>
                        To Do List:
                        <select @onchange="ToDoListOnChange">
                            <option>Select to Do List...</option>
                            @if (toDoListList != null)
                            {
                                @foreach (var toDoList in toDoListList)
                                {
                                    if (blogPostAdminEditModel.ToDoList != null && blogPostAdminEditModel.ToDoList.Id.Equals(toDoList.Id))
                                    {
                                        <option value="@toDoList.Id" selected>@toDoList.Title</option>
                                    }
                                    else
                                    {
                                        <option value="@toDoList.Id">@toDoList.Title</option>
                                    }
                                }
                            }
                        </select>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Title:
                        <InputText @bind-Value="blogPostAdminEditModel.Title" />
                    </label>
                </div>
            </div> *@

            <div class="row">
                <div class="col">
                    @if (!Id.Equals(Guid.Empty))
                    {
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                    }
                </div>
                <div class="col">
                    <a href="/admin/blog-post-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    BlogPostAdminEditModel blogPostAdminEditModel { get; set; } = new BlogPostAdminEditModel();

    List<ApplicationUser> authorList { get; set; } = [];
    List<Category> categoryList { get; set; } = [];
    @* ListDeclarationCodePlaceholder *@
    @* List<ToDoList>? toDoListList { get; set; } *@

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        await base.OnInitializedAsync();

        var authorListResult = await ApplicationUserAdminService.GetAllAsync(userName);
        if (authorListResult != null)
        {
            authorList = authorListResult;
        }
        var categoryListResult = await CategoryAdminService.GetAllAsync(userName);
        if (categoryListResult != null)
        {
            categoryList = categoryListResult;
        }
        @* OnInitializedCodePlaceholder *@
        @* var toDoListListResult = await ToDoListAdminService.GetAllAsync(userName);
        if (toDoListListResult != null)
        {
            toDoListList = toDoListListResult;
        } *@
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var databaseBlogPostAdminDto = await BlogPostAdminService.GetByIdAsync(userName, Id);

        if (databaseBlogPostAdminDto == null)
        {
            blogPostAdminEditModel = new BlogPostAdminEditModel();
        }
        else
        {
            blogPostAdminEditModel = BlogPostAdminEditModel.FromBlogPostAdminDto(databaseBlogPostAdminDto);
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        @* if (string.IsNullOrWhiteSpace(blogPostAdminEditModel.Name))
        {
            return;
        } *@

        var blogPostAdminDto = BlogPostAdminEditModel.ToBlogPostAdminDto(blogPostAdminEditModel);
        blogPostAdminDto.ApplicationUserName = userName;

        if (Id.Equals(Guid.Empty))
        {
            var newBlogPostAdminDto = await BlogPostAdminService.AddAsync(blogPostAdminDto);

            if (newBlogPostAdminDto == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/blog-post-edit/{newBlogPostAdminDto.Id}");
        }
        else
        {
            await BlogPostAdminService.EditAsync(blogPostAdminDto);
        }
    }

    async Task Delete()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        await BlogPostAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/blog-post-list");
    }


    void AuthorOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        blogPostAdminEditModel.Author = authorList?.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    }

    @* OnChangeCodePlaceholder *@
    @* void ToDoListOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        blogPostAdminEditModel.ToDoList = toDoListList?.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    } *@
}
