@page "/admin/category-edit"
@page "/admin/category-edit/{id:guid}"
@inject ICategoryAdminService CategoryAdminService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<section>
    @if (Id.Equals(Guid.Empty))
    {
        <h1>Category Role</h1>
    }
    else
    {
        <h1>Edit Category</h1>
    }
    <article>
        <EditForm class="container" Model="LowercaseNamePlaceholder" OnSubmit="HandleSubmit">
            @* <div class="row">
                <div class="col">
                    <label>
                        PropertyNamePlaceholder:
                        <InputText @bind-Value="LowercaseNamePlaceholder.PropertyNamePlaceholder">@LowercaseNamePlaceholder.PropertyNamePlaceholder</InputText>
                    </label>
                </div>
            </div> *@
            <div class="row">
                <div class="col">
                    <button @onclick="Delete" type="button" class="btn btn-danger">Delete</button>
                </div>
                <div class="col">
                    <a href="/admin/category-list">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </EditForm>
    </article>
</section>

@code {
    [Parameter]
    public Guid Id { get; set; }
    Category LowercaseNamePlaceholder { get; set; } = new Category();

    protected override async Task OnParametersSetAsync()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var result = await CategoryAdminService.GetByIdAsync(Id);

        if (result == null)
        {
            LowercaseNamePlaceholder = new Category();
        }
        else
        {
            LowercaseNamePlaceholder = result;
        }
    }

    async Task HandleSubmit()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (userName == null)
        {
            return;
        }

        if (userName == null)
        {
            return;
        }

        if (LowercaseNamePlaceholder == null)
        {
            return;
        }

        if (Id.Equals(Guid.Empty))
        {
            var dbCategory = await CategoryAdminService.AddAsync(userName, LowercaseNamePlaceholder);

            if (dbCategory == null)
            {
                return;
            }

            NavigationManager.NavigateTo($"/admin/category-edit/{dbCategory.Id}");
        }
        else
        {
            await CategoryAdminService.EditAsync(userName, Id, LowercaseNamePlaceholder);
        }
    }

    async Task Delete()
    {
        if (Id.Equals(Guid.Empty))
        {
            return;
        }

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        if (userName == null)
        {
            return;
        }

        await CategoryAdminService.DeleteAsync(userName, Id);
        NavigationManager.NavigateTo($"/admin/category-list");
    }
}
